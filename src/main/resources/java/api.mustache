package {{package}};

import {{invokerPackage}}.RestResponse;
{{#imports}}import {{import}};
{{/imports}}

import java.util.*;

import javax.ws.rs.client.Entity;
import javax.ws.rs.client.Invocation.Builder;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

{{#operations}}
public class {{classname}} {
    private final WebTarget baseTarget;
	
    public {{classname}}(WebTarget baseTarget) {
        this.baseTarget = baseTarget;
    }

    {{#operation}}
    /** 
     * {{summary}} {{notes}}
     * 
    {{#allParams}}  * @param {{paramName}} {{description}}
    {{#hasMore}} {{/hasMore}}{{/allParams}}
      */
    public {{#returnType}}RestResponse<{{{returnType}}}> {{/returnType}}{{^returnType}}Response {{/returnType}} {{nickname}}({{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) {
        WebTarget target = baseTarget.path("{{path}}");

        {{#requiredParamCount}}
        // verify required params are set
        if ({{/requiredParamCount}}{{#requiredParams}} {{paramName}} == null {{#hasMore}}|| {{/hasMore}}{{/requiredParams}}{{#requiredParamCount}}) {
            throw new IllegalArgumentException("API method call is missing required parameters");
        }
        {{/requiredParamCount}}

        {{#pathParams}}target = target.resolveTemplate("{{paramName}}", {{paramName}});
        {{/pathParams}}

        {{#queryParams}}if ({{paramName}} != null){
            target = target.queryParam("{{paramName}}", {{paramName}});
        }
        {{/queryParams}}

        Builder builder = target.request(MediaType.APPLICATION_JSON);
        {{#bodyParam}}Response response = builder.method("{{httpMethod}}", Entity.json({{bodyParam}}));
        {{/bodyParam}}
        {{#headerParams}}builder = builder.header("{{paramHeader}}", {{paramName}});
        {{/headerParams}}

        {{#bodyParam}}
        List<String> location = response.getStringHeaders().getOrDefault("Location", null);
        if(location != null && !location.toString().isEmpty())
        {
            body.setId(location.get(0).split("/")[location.get(0).split("/").length-1]);       
        }
        {{/bodyParam}}
        {{#returnType}}return new RestResponse{{#returnType}}<{{{returnType}}}>{{/returnType}}(builder.method("{{httpMethod}}")) {};
        {{/returnType}}
        {{^returnType}}{{#bodyParam}}return response;
        {{/bodyParam}}
        {{^bodyParam}}return builder.method("{{httpMethod}}");
        {{/bodyParam}}
        {{/returnType}}
    }
    {{/operation}}
}
{{/operations}}